{
  "C++ Template": {
    "prefix": "cpp",
    "body": [
      "#include <iostream>",
      "#include <cstring>",
      "#include <string>",
      "#include <cmath>",
      "#include <sstream>",
      "#include <map>",
      "#include <set>",
      "#include <vector>",
      "#include <algorithm>",
      "#include <chrono>",
      "int A[101];",
      "#define FOR(i,a,b) for (int i = (a); i <= (b); i++)",
      "#define file(a) freopen(a \".i\",\"r\",stdin); freopen(a \".o\",\"w\",stdout);",
      "#define endl '\\n'",
      "using ll = long long;",
      "using db = double;",
      "using str = std::string;",
      "",
      "int main() {",
      "    std::system(\"cls\");",
      "    #ifndef ONLINE_JUDGE",
      "    freopen(\"input.inp\",\"r\",stdin);",
      "    freopen(\"output.out\",\"w\",stdout);",
      "    #endif",
      "    std::ios_base::sync_with_stdio(false);",
      "    std::cin.tie(0); std::cout.tie(0);",
      "    auto start = std::chrono::high_resolution_clock::now();",
      "",
      "    $0",
      "",
      "    std::cout<<\"\\nTime taken: \"<<std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now()-start).count()<<\"ms\";",
      "    return 0;",
      "}"
    ],
    "description": "C++ Template with system, file I/O, and for loop"
  },
  "C++ Freopen": {
    "prefix": "fp",
    "body": [
      "    #ifndef ONLINE_JUDGE",
      "    freopen(\"i.txt\",\"r\",stdin);",
      "    freopen(\"o.txt\",\"w\",stdout);",
      "    #endif"
    ],
    "description": "C++ freopen template for file I/O"
  },
  "main": {
    "prefix": "main",
    "body": [
      "// ${TM_FILENAME_BASE}.cpp",
      "#pragma GCC optimize(\"O3,unroll-loops\")",
      "#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")",
      "#include <iostream>",
      "#include <vector>",
      "#include <algorithm>",
      "#ifndef ONLINE_JUDGE",
      "#define FILE freopen( \"i.txt\",\"r\",stdin); freopen(\"o.txt\",\"w\",stdout);",
      "#endif",
      "#define ll long long",
      "#define endl '\\n'",
      "",
      "int main(int argc, char* argv[]) {",
      "    FILE;",
      "    std::ios_base::sync_with_stdio(false);",
      "    std::cin.tie(0); std::cout.tie(0);",
      "",
      "    $0",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Main function template"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:n}; ++${2:i}) {",
      "    $0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "vector": {
    "prefix": "vector",
    "body": ["std::vector<${1:int}> ${2:v};"],
    "description": "Code snippet for vector declaration"
  },
  "stack": {
    "prefix": "stack",
    "body": ["std::stack<${1:int}> ${2:s};"],
    "description": "Code snippet for stack declaration"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = ${2:length} - 1; ${1:i} >= ${3:0}; --${1:i}) {",
      "    $0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "do": {
    "prefix": "do",
    "body": ["do {", "    $0", "} while(${1:condition});"],
    "description": "Code snippet for do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "    $0", "}"],
    "description": "Code snippet for while loop"
  },
  "foreach": {
    "prefix": "fe",
    "body": ["for(auto ${1:x} : ${2:container}) {", "    $0", "}"],
    "description": "Code snippet for range-based for loop (c++11) statement"
  },
  "if": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "    $0", "}"],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": ["else {", "    $0", "}"],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": "elif",
    "body": ["else if (${1:condition}) {", "    $0", "}"],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum} {", "    $0", "};"],
    "description": "Code snippet for enum"
  },
  "enum class": {
    "prefix": "enumclass",
    "body": ["enum class ${1:${TM_FILENAME_BASE}} { $0 };"],
    "description": "Code snippet for enum class (c++11)"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} {",
      "public:",
      "    ${1:${TM_FILENAME_BASE}}();",
      "    ${1:${TM_FILENAME_BASE}}(${1:${TM_FILENAME_BASE}} &&) = default;",
      "    ${1:${TM_FILENAME_BASE}}(const ${1:${TM_FILENAME_BASE}} &) = default;",
      "    ${1:${TM_FILENAME_BASE}} &operator=(${1:${TM_FILENAME_BASE}} &&) = default;",
      "    ${1:${TM_FILENAME_BASE}} &operator=(const ${1:${TM_FILENAME_BASE}} &) = default;",
      "    ~${1:${TM_FILENAME_BASE}}();",
      "",
      "private:",
      "    $0",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}::${1:${TM_FILENAME_BASE}}() {",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}::~${1:${TM_FILENAME_BASE}}() {",
      "}"
    ],
    "description": "Code snippet for class"
  },
  "classi": {
    "prefix": "classi",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} {",
      "public:",
      "    ${1:${TM_FILENAME_BASE}}() = default;",
      "    ${1:${TM_FILENAME_BASE}}(${1:${TM_FILENAME_BASE}} &&) = default;",
      "    ${1:${TM_FILENAME_BASE}}(const ${1:${TM_FILENAME_BASE}} &) = default;",
      "    ${1:${TM_FILENAME_BASE}} &operator=(${1:${TM_FILENAME_BASE}} &&) = default;",
      "    ${1:${TM_FILENAME_BASE}} &operator=(const ${1:${TM_FILENAME_BASE}} &) = default;",
      "    ~${1:${TM_FILENAME_BASE}}() = default;",
      "",
      "private:",
      "    $0",
      "};"
    ],
    "description": "Code snippet for class with inline constructor/destructor"
  },
  "interface": {
    "prefix": "interface",
    "body": ["__interface I${1:Interface} {", "    $0", "};"],
    "description": "Code snippet for interface (Visual C++)"
  },
  "namespace": {
    "prefix": "namespace",
    "body": ["namespace ${1:MyNamespace} {", "    $0", "}"],
    "description": "Code snippet for namespace"
  },
  "#ifdef": {
    "prefix": "ifdef",
    "body": ["#ifdef ${1:DEBUG}", "    $0", "#endif // ${1:DEBUG}"],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "ifndef",
    "body": ["#ifndef ${1:HEADER_H}", "    $0", "#endif // !${1:HEADER_H}"],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "if",
    "body": ["#if ${1:0}", "    $0", "#endif // ${1:0}"],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1:MyStruct} {", "    $0", "};"],
    "description": "Code snippet for struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:expression}) {",
      "case ${2:value}:",
      "    $0",
      "    break;",
      "default:",
      "    break;",
      "}"
    ],
    "description": "Code snippet for switch statement"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "    $0",
      "}",
      "catch (const std::exception& ${1:e}) {",
      "    ${2:// Handle exception}",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "union": {
    "prefix": "union",
    "body": ["union ${1:MyUnion} {", "    $0", "};"],
    "description": "Code snippet for union"
  },
  "cout": {
    "prefix": "cout",
    "body": ["std::cout << ${1:output} << \"\\n\";"],
    "description": "Code snippet for printing to std::cout"
  },
  "cin": {
    "prefix": "cin",
    "body": ["std::cin >> ${1:input};"],
    "description": "Code snippet for reading from std::cin"
  },
  "#inc": {
    "prefix": "inc",
    "body": ["#include <${1:iostream}>"],
    "description": "Code snippet for #include <>"
  },
  "#inc\"": {
    "prefix": "inch",
    "body": ["#include \"${1:header.h}\""],
    "description": "Code snippet for #include \"\""
  },
  "#def": {
    "prefix": "def",
    "body": ["#define ${1:MACRO} ${2:value}"],
    "description": "Code snippet for #define"
  }
}
